# This is a basic workflow to help you get started with Actions

name: Native Build

# Controls when the workflow will run
on: push

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  #  generateNativeConfig:
  #   runs-on: ubuntu-latest
  #   steps:
  #       - uses: actions/checkout@v2
  #       - uses: ayltai/setup-graalvm@v1
  #         with:
  #           java-version: 11
  #           graalvm-version: 22.2.0
  #           native-image: true
  #       - name: Generate assisted configuration for GraalVM native build
  #         working-directory: server
  #         run: mvn -e -B -Pnative -Dagent=true test
  #       - uses: actions/upload-artifact@v3
  #         with:
  #           name: configuration
  #           path: server/engine/target/native/agent-output/test/*

  # buildOnWindows:
  #   runs-on: windows-latest
  #   needs: [generateNativeConfig]
  #   steps:
  #     - uses: al-cheb/configure-pagefile-action@v1.2
  #       with:
  #         minimum-size: 16GB
  #         maximum-size: 16GB
  #         disk-root: "C:"
  #     - uses: actions/checkout@v2
  #     - name: Retrieve native build configurations
  #       uses: actions/download-artifact@v3
  #       with:
  #         path: configuration
  #         name: configuration
  #     - name: Add graalVM configuration to server
  #       run: cp -rp configuration/session-*/ server/engine/src/main/resources/META-INF/native-image/
  #       shell: bash
  #     - uses: ilammy/msvc-dev-cmd@v1.5.0
  #     - uses: microsoft/setup-msbuild@v1
  #     - uses: ayltai/setup-graalvm@v1
  #       with:
  #         java-version: 11
  #         graalvm-version: 22.2.0
  #         native-image: true
  #     - name: Build with Maven
  #       working-directory: server
  #       run: mvn -e -B -Pnative -DskipTests clean package
  #       shell: powershell
  #     - uses: actions/upload-artifact@v3
  #       with:
  #         if-no-files-found: warn
  #         name: package-win
  #         path: |
  #           server/engine/target/*.exe
  #           server/engine/target/*.dll
  #           server/engine/target/*.txt
  #     - uses: actions/upload-artifact@v3
  #       with:
  #         if-no-files-found: warn
  #         name: logs
  #         path: engine/target/*.log

  # buildOnMac:
  #   runs-on: macos-latest
  #   needs: [generateNativeConfig]
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: ayltai/setup-graalvm@v1
  #       with:
  #         java-version: 11
  #         graalvm-version: 22.2.0
  #         native-image: true
  #     - name: Retrieve native build configurations
  #       uses: actions/download-artifact@v3
  #       with:
  #         path: configuration
  #         name: configuration
  #     - name: Display structure of downloaded files
  #       run: ls -R
  #       working-directory: configuration
  #     - name: Add graalVM configuration to server
  #       run: cp -rp configuration/session-*/ server/engine/src/main/resources/META-INF/native-image/
  #     - name: Build with Maven
  #       working-directory: server
  #       run: mvn -e -B -Pnative -DskipTests clean package
  #     - name: Run UPX
  #       uses: svenstaro/upx-action@v2
  #       with:
  #         file: server/engine/target/engine
  #         args: '-7'
  #     - name: Upload artifacts
  #       run: mkdir staging && cp server/engine/target/engine staging/server-mac-amd64
  #     - uses: actions/upload-artifact@v3
  #       with:
  #         name: package-macos
  #         path: staging
  #     - uses: actions/upload-artifact@v3
  #       with:
  #         if-no-files-found: warn
  #         name: logs
  #         path: engine/target/*.log

  buildOnLinux:
    runs-on: ubuntu-latest
    # needs: [generateNativeConfig]
    steps:
      - uses: actions/checkout@v2
      - uses: ayltai/setup-graalvm@v1
        with:
          java-version: 11
          graalvm-version: 22.2.0
          native-image: true
      # - name: Retrieve native build configurations
      #   uses: actions/download-artifact@v3
      #   with:
      #     path: configuration
      #     name: configuration
      # - name: Display structure of downloaded files
      #   run: ls -R
      #   working-directory: configuration
      # - name: Add graalVM configuration to server
      #   run: cp -rp configuration/session-*/ server/engine/src/main/resources/META-INF/native-image/
      - name: Build with Maven
        working-directory: server
        run: mvn -DskipTests clean package
      # - name: Run UPX
      #   uses: crazy-max/ghaction-upx@v1.3.3
      #   with:
      #     version: latest
      #     file: server/engine/target/engine
      #     args: '-7'
      #  run: mkdir staging && cp server/engine/target/engine staging/server
      # - uses: actions/upload-artifact@v3
      #   with:
      #     name: package-linux
      #     path: staging
      - uses: actions/upload-artifact@v3
        with:
          name: jar
          path: server/engine/target/server.jar
      - uses: actions/upload-artifact@v3
        with:
          if-no-files-found: warn
          name: logs
          path: server/target/*.log

  tests:
    runs-on: windows-latest
    needs: [buildOnLinux]
    defaults:
      run:
        shell: bash
    steps:
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: '11.0.13'
          distribution: 'microsoft'
      - run: java -version
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v3
        with:
          node-version: 14
      - name: build client
        run: npm ci --ignore-scripts
        working-directory: clients/cobol-lsp-vscode-extension
      - name: postinstall
        run: npm run postinstall
        working-directory: clients/cobol-lsp-vscode-extension
      - name: Retrieve server jar
        uses: actions/download-artifact@v3
        with:
          path: staging
      - name: configure server jar
        working-directory: clients/cobol-lsp-vscode-extension
        run: "cp -R ../../staging/jar/* ./server/jar"
      # - name: coverage
      #   run: npm run coverage
      #   working-directory: clients/cobol-lsp-vscode-extension
      # - name: integration-test
      #   uses: GabrielBB/xvfb-action@v1.0
      #   with:
      #     run: npm --prefix clients/cobol-lsp-vscode-extension run test:integration
  build:
    runs-on: ubuntu-latest
    needs: [tests]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v3
        with:
          node-version: 14
      - name: Retrieve native images
        uses: actions/download-artifact@v3
        with:
            path: staging
      - name: configure server jar
        working-directory: clients/cobol-lsp-vscode-extension
        run: "cp -R ../../staging/jar/* ./server/jar"
      # - name: configure windows executable
      #   working-directory: clients/cobol-lsp-vscode-extension
      #   run: |
      #     cp ../../staging/package-win/engine.build_artifacts.txt ./server/package-win
      #     cp ../../staging/package-win/engine.exe ./server/package-win
      #     cp ../../staging/package-win/sunmscapi.dll ./server/package-win
      # - name: configure mac executable
      #   working-directory: clients/cobol-lsp-vscode-extension
      #   run: |
      #     cp -p ../../staging/package-macos/server-mac-amd64 ./server/package-macos
      #     chmod +x ./server/package-macos/server-mac-amd64
      #- name: configure linux executable
        # working-directory: clients/cobol-lsp-vscode-extension
        # run: |
        #   cp -p ../../staging/package-linux/server ./server/package-linux
        #   chmod +x ./server/package-linux/server
      - uses: actions/upload-artifact@v3
        with:
          name: serverContent
          path: ./clients/cobol-lsp-vscode-extension/server
      - name: build client
        run: npm ci --ignore-scripts
        working-directory: clients/cobol-lsp-vscode-extension
      - name: postinstall
        run: npm run postinstall
        working-directory: clients/cobol-lsp-vscode-extension
      - name: generate vsix
        working-directory: clients/cobol-lsp-vscode-extension
        run: |
          npm run package
          cp *.vsix ../../.
      - uses: actions/upload-artifact@v3
        with:
          name: vsix-package
          path: '*.vsix'
  cypress-run:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v3
        with:
          node-version: 14
      - name: Retrieve native images
        uses: actions/download-artifact@v3
        with:
            path: staging
      - name: make cobol-lsp plugin folder
        run: mkdir -p tests/theia/plugins
      - name: Copy vsix file
        run: cp staging/vsix-package/*.vsix tests/theia/plugins
      - name: Add on
        run: |
          pwd 
          ls 
          ls tests/theia/plugins
      - name: up docker image
        uses: addnab/docker-run-action@v3
        with:
          image: "grianbrcom/theia-full:1.15.0"
          options: --rm -p 3000:3000 -v /home/runner/work/che-che4z-lsp-for-cobol/che-che4z-lsp-for-cobol/tests/theia/plugins:/home/theia -v /home/runner/work/che-che4z-lsp-for-cobol/che-che4z-lsp-for-cobol/tests/test_files/project:/home/project --hostname=0.0.0.0 --plugins=local-dir:/home/runner/work/che-che4z-lsp-for-cobol/che-che4z-lsp-for-cobol/tests/theia/plugins
          run: |
             cd /home/theia
            #  PROJECT_FOLDER=tests/test_files/project
            #  THEIA_PLUGINS=tests/theia/plugins
            #  export HOME=$THEIA_HOME
            #  export _JAVA_OPTIONS=-Duser.home=$THEIA_HOME
            #  node /home/theia/src-gen/backend/main.js $PROJECT_FOLDER --hostname=0.0.0.0 --plugins=tests/theia/plugins 
      - name: Build the node modules after cleaning the cache
        run: |
          export HOME=$CYPRESS_HOME
          export CYPRESS_CACHE_FOLDER=$CYPRESS_HOME/.cache/Cypress
          cd tests
          rm -rf node_modules/ yarn.lock
          yarn cache clean
          yarn install --frozen-lockfile
          npm run ts:build
      - name: Cypress run
        uses: cypress-io/github-action@v4         
        with:         
          start: npm run cy:run:ci -- --env ide=theia  
          working-directory: tests

    

















    



       

